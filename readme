                    _             _ 
__      ____ _ _ __| | _____   __| |
\ \ /\ / / _` | '__| |/ / _ \ / _` |
 \ V  V / (_| | |  |   < (_) | (_| |
  \_/\_/ \__,_|_|  |_|\_\___/ \__,_|
                                    
WarKoD - Wykrywacz loga Warszawskich Kolei Dojazdowych
                                    
Program przyjmuje plik zdjęcia i wykrywa na nim logo Warszawskich Kolei Dojazdowych.
                                    
Napisany w C++ w najnowszym standardzie.
Użyj dołączonego CMake do kompilacji.
Warto ustawić zmienną CXXFLAGS=-O2, co ustawi flagi kompilacji dla CMake, w celu przyspieszenia programu.
Licencja GPL.
                                    
Projekt używa:
• opencv (testowane na wersji 4.0.0)

Algorytmy zostały zaimplementowane w C++, obiektowo. 
Co oznacza, że program będzie wolniejszy niż alternatywne implementacje w C, bazujące na tablicach, raczej niż na kontenerach.
Nie ma póki co żadnej optymalizacji na żadnym etapie.
Jednak dzięki obiektowości, kod jest mało awaryjny, czytelny (na ile C++ jest czytelne) i łatwy do debugu.

Możliwe optymalizacje:
• Wielowątkowość przetwarzania jednego obrazu
• Przetwarzanie fragmentu obrazu, zamiast całości
• Odrzucanie niektórych obiektów na wstępie

Zaimplementowane funkcjonalności:
• Filtr medianowy, kwadratowy o dowolnej wielkości
• Rozdzielenie obrazu na obrazy binarne względem koloru
• Rozdzielenie obrazu binarnego na spójne obiekty

Do zaimplementowania zostało:
• Obliczanie niezmienników dla każdego obrazu
• Porównanie niezmienników z parametrami (w sposób odległości euklidesowej najlepiej)
• Sprawdzenie odległości obiektów od siebie
• Przetestowanie kompilacji na innych systemach (przynajmniej Ubuntu 16.04 LTS) i na Windowsie

Opcjonalne funkcje:
• Optymalizacje i wielowątkowość
• Wczytywanie parametrów algorytmów z linii poleceń (może będzie potrzebny boost), a potem jakieś maszynowe ustawianie
• Wykrywanie więcej jak jednego loga

Testy:
Czerwona strzałka:
M1 img01_mini: 0.251309
M1 img02_mini: 0.2579
M1 img03_mini: 0.272977
